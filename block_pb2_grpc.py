# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import block_pb2 as block__pb2


class BlockDownloaderStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.DownloadBlock = channel.unary_unary(
                '/PyHealthChain.BlockDownloader/DownloadBlock',
                request_serializer=block__pb2.BlockRequest.SerializeToString,
                response_deserializer=block__pb2.BlockResponse.FromString,
                )
        self.DownloadBlocks = channel.unary_stream(
                '/PyHealthChain.BlockDownloader/DownloadBlocks',
                request_serializer=block__pb2.BlocksRequest.SerializeToString,
                response_deserializer=block__pb2.Block.FromString,
                )
        self.GetHashBlocks = channel.unary_stream(
                '/PyHealthChain.BlockDownloader/GetHashBlocks',
                request_serializer=block__pb2.HashBlocksRequest.SerializeToString,
                response_deserializer=block__pb2.HashBlock.FromString,
                )


class BlockDownloaderServicer(object):
    """Missing associated documentation comment in .proto file."""

    def DownloadBlock(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DownloadBlocks(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetHashBlocks(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BlockDownloaderServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'DownloadBlock': grpc.unary_unary_rpc_method_handler(
                    servicer.DownloadBlock,
                    request_deserializer=block__pb2.BlockRequest.FromString,
                    response_serializer=block__pb2.BlockResponse.SerializeToString,
            ),
            'DownloadBlocks': grpc.unary_stream_rpc_method_handler(
                    servicer.DownloadBlocks,
                    request_deserializer=block__pb2.BlocksRequest.FromString,
                    response_serializer=block__pb2.Block.SerializeToString,
            ),
            'GetHashBlocks': grpc.unary_stream_rpc_method_handler(
                    servicer.GetHashBlocks,
                    request_deserializer=block__pb2.HashBlocksRequest.FromString,
                    response_serializer=block__pb2.HashBlock.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'PyHealthChain.BlockDownloader', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class BlockDownloader(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def DownloadBlock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/PyHealthChain.BlockDownloader/DownloadBlock',
            block__pb2.BlockRequest.SerializeToString,
            block__pb2.BlockResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DownloadBlocks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/PyHealthChain.BlockDownloader/DownloadBlocks',
            block__pb2.BlocksRequest.SerializeToString,
            block__pb2.Block.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetHashBlocks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/PyHealthChain.BlockDownloader/GetHashBlocks',
            block__pb2.HashBlocksRequest.SerializeToString,
            block__pb2.HashBlock.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
